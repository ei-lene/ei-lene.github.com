<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Padawan coder]]></title>
  <link href="http://ei-lene.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ei-lene.github.com/"/>
  <updated>2013-03-07T22:59:51-05:00</updated>
  <id>http://ei-lene.github.com/</id>
  <author>
    <name><![CDATA[ei-lene]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Q&amp;A Quickie - about object ids]]></title>
    <link href="http://ei-lene.github.com/blog/2013/02/19/q-and-a-quickie-about-object-ids/"/>
    <updated>2013-02-19T23:49:00-05:00</updated>
    <id>http://ei-lene.github.com/blog/2013/02/19/q-and-a-quickie-about-object-ids</id>
    <content type="html"><![CDATA[<p>I became intrigued about object ids when I was researching into the <code>.equal?</code> operator in <a href="http://ei-lene.github.com/blog/2013/02/08/all-equalities-are-equal/">my earlier post on Ruby equalities</a>, and also when I was wading through <a href="http://rubykoans.com/">Ruby Koans’ </a>about_object.rb.</p>

<p>And so, here’s my summary on the questions I had, and the answers that my research yielded:<br>
<a href="#q1">1) What is an object id?</a><br>
<a href="#q2">2) Why is true.object_id != 1?</a><br>
<a href="#q3">3) Which objects have fixed object_ids, and what are the practical implications?</a></p>

<p><strong><a name="q1">1) What is an object id?</a></strong><br>
An object id is a unique identifier for an object, much like a fingerprint. All objects have an object id. In Ruby, the method
<code>.object_id</code> returns an object’s unique identifier, which is presented by a number or a string of numbers.</p>

<p><strong><a name="q2">2) Why is true.object_id != 1?</a></strong><br>
Given that true and false are a fundamental part of most programming languages, I expected the object id for true to be 1, and the object id for false to be 0.</p>

<p>So it surprised me to find that while <code>false.object_id == 0</code>, <code>true.object_id == 2</code>, and <code>nil.object_id == 4</code>. Why do true and nil have such strange object ids?</p>

<p>The reason for that is that the other, perhaps more obvious numbers (like 1 and 2) are taken up by integers due to the pattern for Fixnum (integer) object ids.</p>

<p>As was tested in Ruby Koans’ about_object.rb, in Ruby, the object ids for integers (i) follow the pattern: <code>i * 2 +1</code>
such that:
<img src="http://ei-lene.github.com/images/2013_02_19/fixnum1.png"></p>

<p>This pattern also holds true for negative integers:
<img src="http://ei-lene.github.com/images/2013_02_19/fixnum2.png"></p>

<p><strong><a name="q3">3) Which objects have fixed object_ids, and what are the practical implications?</a></strong><br>
As part of my earlier post on Ruby equalities, I tinkered around a lot with <code>.object_id</code> in irb, researching the application of the <code>.equal?</code> operator.</p>

<p>Overall, objects seem to fall into 3 categories:<br>
<a href="fixed">i)  those with fixed object ids</a><br>
<a href="#temporary">ii) those with temporarily fixed object ids</a><br>
<a href="#changing">iii)  those with changing object ids</a></p>

<p><em><a name="fixed">Objects with Fixed object ids:</a></em><br>
<em>1) Fixnum</em><br>
As mentioned above, integers have fixed object ids.</p>

<p><em>2) Symbols</em><br>
Once created, symbols have immutable object ids, which will remain constant, even if the values have been reassigned.</p>

<p>For example:<br>
<img src="http://ei-lene.github.com/images/2013_02_19/symbols.png"><br>
In all cases, the object_id of the symbol name is identical</p>

<p><em><a name="temporary">Objects with temporarily fixed object ids:</a></em><br>
<em>1) Variables </em><br>
Once created, variables will have the same object id each time it is called, unless the variable has been reassigned, in which case, the variable object id will change. While the variable retains its assigned value, its object id is temporarily constant:<br>
<img src="http://ei-lene.github.com/images/2013_02_19/variables1.png"><br>
If a variable is assigned to a Fixnum, the variable will take on that Fixnum’s object id: <br>
<img src="http://ei-lene.github.com/images/2013_02_19/variables2.png"><br>
This will also apply in the case where a variable is assigned to a symbol:<br>
<img src="http://ei-lene.github.com/images/2013_02_19/variables3.png"></p>

<p><em>2) Arrays</em><br>
Like variables, arrays have a temporarily fixed object id while the contents of the array have not changed: <br>
<img src="http://ei-lene.github.com/images/2013_02_19/arrays.png"></p>

<p><em>3) Hashes</em><br>
Like variables and arrays, hashes have a temporarily fixed object id while the contents of the array have not changed:<br>
<img src="http://ei-lene.github.com/images/2013_02_19/hashes.png"></p>

<p><em><a name="changing">Objects with changing object ids:</a></em><br>
1) Floats<br>
Floats have new and different object ids, each time they are called:<br>
<img src="http://ei-lene.github.com/images/2013_02_19/floats.png"></p>

<p><em>2) Strings</em><br>
Strings have new and different object ids, each time they are called: <br>
<img src="http://ei-lene.github.com/images/2013_02_19/strings.png"></p>

<p><em>3) Instances of an object</em><br>
A new object, once created, behave very much like variables – they have the same object id each time they are called, as long as they have not been modified. Each iteration of the object will result in a temporarily fixed object id:<br>
<img src="http://ei-lene.github.com/images/2013_02_19/objectinstances1.png"></p>

<p>However, each instance of an object, including clones of another object, have their own unique object id:<br>
<img src="http://ei-lene.github.com/images/2013_02_19/objectinstances2.png"></p>

<p><em>Implications / applications:</em><br>
As far as I know, the primary (most common) application of the above object id properties, are in the usage of symbols rather than strings for naming things or representing data.</p>

<p>Given that symbols have an immutable object id once they are created, whereas strings have a different and individual object id each time they are called, symbols take up less space in the computer’s memory. Hence, we should use symbols instead of strings as hash keys, or attributes – because if the hash key or attribute will be called over and over again, using symbols will significantly increase the performance of the program.</p>

<p>I found <a href="http://www.robertsosinski.com/2009/01/11/the-difference-between-ruby-symbols-and-strings/">Robert Sosinki’s tutorial on Symbols vs. Strings </a>particularly illuminating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All equalities are equal...]]></title>
    <link href="http://ei-lene.github.com/blog/2013/02/08/all-equalities-are-equal/"/>
    <updated>2013-02-08T22:02:00-05:00</updated>
    <id>http://ei-lene.github.com/blog/2013/02/08/all-equalities-are-equal</id>
    <content type="html"><![CDATA[<h3><em>...but some are more equal than others</em></h3>


<p>I started on this trail because I'm a pedant about spelling, and got stuck on <a href="http://rubymonk.com/learning/books/1/chapters/8-control-structures/lessons/43-boolean-expressions-in-ruby">Ruby Monk's first Boolean exercise</a>.</p>

<p>Why was the following solution invalid >> <code>name.equal?("Bob")</code> <br>
and this solution valid instead? >> <code>name.eql?("Bob")</code></p>

<p>This set me off researching Ruby equality operators.<br>
There seems to be four types of equality operators:-<br>
<a href="#==">'=='</a><br>
<a href="#eql">'.eql?'</a><br>
<a href="#equal">'.equal?'</a><br>
<a href="#===">'==='</a></p>

<p>And so it would seem, to misquote George Orwell, that some equalities are more equal than others.</p>

<p><a name="=="><strong>==</strong></a><br>
<strong>Simple (or Value) equality.</strong><br>
<em><code>==</code> returns true if both sides of the operator have the same value, regardless of datatype.</em></p>

<p>Thus:<br>
<img src="http://ei-lene.github.com/images/2013_02_08/ValueEquality1.png"></p>

<p>However, the Ruby <code>==</code> operator is not quite as forgiving its Javascript counterpart. It does not convert strings to integers, nor does it recognise upper and lower case versions of the same letter as being of the same value.</p>

<p>Therefore:<br>
<img src="http://ei-lene.github.com/images/2013_02_08/ValueEquality2.png"></p>

<p><a name="eql"><strong>.eql?</strong></a><br>
<strong>Value and Type Equality</strong><br>
<em><code>.eql?</code> has stricter equality criteria than <code>==</code>. It tests for equality of value as well as data type.</em></p>

<p>Hence:<br>
<img src="http://ei-lene.github.com/images/2013_02_08/ValueTypeEquality.png"></p>

<p><a name="equal"><strong>.equal?</strong></a><br>
<strong>Strict (True or Object) Equality</strong><br>
<em><code>.equal?</code> has the strictest test of equality*, and is "the most equal of them all". It tests for equality of object ID.</em></p>

<p>As a newbie Rubyist at <a href="http://flatironschool.com/">the Flatiron School</a>, I have very recently learnt that all strings (even if identical) have their own individual object ID each time they are written (called?), whereas symbols have a unique and immutable object ID, which will remain each time the symbol is called, even if the value has been reassigned.</p>

<p>The moral of the story was that we should only use symbols (and never strings) as keys in hashes, since they are 'cheaper' than strings in terms of memory and performance (in fact, in researching this, I have discovered that object IDs would be another interesting post for another day, but I digress...)</p>

<p><a href="http://french.about.com/od/vocabulary/a/revenonsanosmoutons.htm">Revenons à nos moutons</a>** - it would seem that this equality test would be passed in fairly limited cases - primarily when symbols or integers are tested against themselves***:<br>
<img src="http://ei-lene.github.com/images/2013_02_08/ObjectEquality.png"></p>

<p><a name="==="><strong>===</strong></a><br>
<strong>Case Equality (or "Subset equality" or "False Equality")</strong></p>

<p>Okay, so I've completely made up the equality names in the parenthesis for this. For that matter, all the equality names for all the other operators are also kind of 'made-up' by me, but in those cases, I think they are fairly representative of what those equality operators test for.</p>

<p><em><code>===</code> is generally known everywhere, including <a href="http://ruby-doc.org/core-1.9.3/Object.html#method-i-3D-3D-3D">in the Ruby documentation</a>, as "Case equality".</em></p>

<p>I thought that <a href="http://techbot.me/2011/05/ruby-basics-equality-operators-ruby/">Techbot</a> and <a href="http://www.tutorialspoint.com/ruby/ruby_operators.htm
">TutorialsPoint</a> gave the best illustrations of the Case Equality usage of <code>===</code>, which I will illustrate briefly below:<br>
<img src="http://ei-lene.github.com/images/2013_02_08/SubsetCaseEquality1.png"></p>

<p>While I agree with the above usage (it clearly works!), I see things more simplistically. To me, the <code>===</code> operator seems to test if the item on right hand side of the operator is a subset of the left hand side of the operator.</p>

<p>For example: <br>
<img src="http://ei-lene.github.com/images/2013_02_08/SubsetCaseEquality2.png"></p>

<p>The <code>===</code> operator doesn't seem to test for subset in the cases of strings, arrays and hashes, but it works with Regex:<br>
<img src="http://ei-lene.github.com/images/2013_02_08/SubsetCaseEquality3.png"></p>

<p>Anyway, because I think <code>===</code> is testing if one element (object?) is a subset of another, I don't think that it can be considered an equality test at all, hence my nickname of "False Equality" for it.</p>

<p><a href="http://stackoverflow.com/users/23649/jtbandes">jtbandes</a> says on <a href="stackoverflow.com">StackOverflow</a> that <code>===</code> is incredibly useful for implementations in range, regex and proc (and people seem to compare it to the #== operator), but since all that is WAY over my head, I'll just take his word for it, and you can <a href="http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and">check it out there</a>.</p>

<p>After all this research, I'm kind of at peace with Ruby's misspelling of <code>.eql?</code>, because I can see that it is necessary to differentiate it from <code>.equal?</code></p>

<p>But I'm still annoyed with <code>elsif</code>… >:(</p>

<p style="font-size: 70%; font-weight: normal">
Notes:<br>
* In my rather-uninformed opinion (as I'm an absolute newbie), I am more than happy to be enlightened if I've made any mistakes in my blog post.<br>
** A French expression for - to get back to the subject. <a href="http://french.about.com/od/vocabulary/a/revenonsanosmoutons.htm">Check out Laura Lawless's guide to French expressions</a>.<br>
*** I'm finding Object IDs pretty fascinating as I've called .object_id on multiple permutations of data types as part of the research for this blog post. I might write about this piece of geekery fascination another day. Also happy to be enlightened/ corrected if I've made any mistakes.

<p style="font-size: 70%; font-weight: normal">
Resources:<br>
<a href="http://truffles.me.uk/rubys-equality-operator">http://truffles.me.uk/rubys-equality-operator</a><br>
<a href="http://techbot.me/2011/05/ruby-basics-equality-operators-ruby/">http://techbot.me/2011/05/ruby-basics-equality-operators-ruby/</a><br>
<a href="http://www.tutorialspoint.com/ruby/ruby_operators.htm">http://www.tutorialspoint.com/ruby/ruby_operators.htm</a><br>
<a href="http://ruby-doc.org/core-1.9.3/Object.html"> http://ruby-doc.org/core-1.9.3/Object.html</a><br>
<a href="http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and"> http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and</a>

]]></content>
  </entry>
  
</feed>
