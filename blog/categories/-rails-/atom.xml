<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: _rails_ | Padawan coder]]></title>
  <link href="http://ei-lene.github.com/blog/categories/-rails-/atom.xml" rel="self"/>
  <link href="http://ei-lene.github.com/"/>
  <updated>2013-04-07T20:59:43-04:00</updated>
  <id>http://ei-lene.github.com/</id>
  <author>
    <name><![CDATA[ei-lene]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exception notifications in production]]></title>
    <link href="http://ei-lene.github.com/blog/2013/04/07/exception-notifications-in-production/"/>
    <updated>2013-04-07T11:46:00-04:00</updated>
    <id>http://ei-lene.github.com/blog/2013/04/07/exception-notifications-in-production</id>
    <content type="html"><![CDATA[<p><img src="http://ei-lene.github.com/images/2013_04_07/error_comic.png"></p>

<p style="font-size: 70%; font-weight: normal">
Source: <a href="http://xkcd.com/1024/">XKCD</a>
</p>


<p>The last couple of weeks at Flatiron School, we have been split into groups to work on group projects. <a href="http://anthonywijnen.com/">Anthony</a>, <a href="http://eewang.github.io">Eugene</a>, <a href="http://janeeats.github.io/">Jane</a>, and I have been working on <a href="http://handrai.se/">Handrai.se</a>, an in-class question-workflow-management app. In the process of deploying our group's app, we've come to realise that what works perfectly in development, doesn't always work quite so smoothly in production, because real-life users don't behave the way we assume they do in our seed file and development testing.</p>

<p>And unlike in development, in production, Rails errors are completely cryptic and uninformative:<br>
<img src="http://ei-lene.github.com/images/2013_04_07/production_error.png"></p>

<p>To get a more informative error message, you would need to log into the server, and into the 'current' folder and type in: <code>tail -f log/production.log</code></p>

<p>But what if you don't personally encounter the error?</p>

<p><a href="https://twitter.com/aviflombaum">Avi</a> suggested using an 'Exception Notifier' gem to get automatically notified each time an error is triggered in production.</p>

<!--more-->


<h4>Exception Notification 123s:</h4>


<p><strong><em>1) Read the updated documentation at <a href="https://github.com/smartinez87/exception_notification">https://github.com/smartinez87/exception_notification</a>:</em></strong><br>
Initially, I was really struggling to work with the Exception Notification gem, because I was reading the old, but SEO-optimised documentation at <a href="https://github.com/rails/exception_notification">https://github.com/rails/exception_notification</a>.</p>

<p>I really should have realised that such a popular gem (#2 on <a href="https://www.ruby-toolbox.com/categories/exception_notification#exception_notification">Ruby-Toolbox</a> with with > 470k downloads) couldn't really have its last commit dated 3 years ago.</p>

<p>It was Blake, who pointed out that there was a newer, and much more active, repo:<br>
<img src="http://ei-lene.github.com/images/2013_04_07/ruby_toolbox.png">
This repo had much clearer instructions.</p>

<p><strong><em>2) Configuring ActionMailer:</em></strong><br>
Exception notification's instructions assumes that you are using <a href="https://github.com/smartinez87/exception_notification">sendmail</a>. We decided to go with <a href="http://mailgun.com/">mailgun</a>.</p>

<p>You can put the following code in the <code>config/environments/production.rb</code> and/or <code>development.rb</code> files depending on whether you want notifications to be sent out only in production or also in development:<br>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">delivery_method</span> <span class="o">=</span> <span class="ss">:smtp</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">smtp_settings</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;:authentication =&amp;gt; :plain,</span>
</span><span class='line'><span class="sr">:address =&amp;gt; &quot;smtp.mailgun.org&quot;,</span>
</span><span class='line'><span class="sr">:port =&amp;gt; 587,</span>
</span><span class='line'><span class="sr">:domain =&amp;gt; &quot;handraise.mailgun.org&quot;,</span>
</span><span class='line'><span class="sr">:user_name =&amp;gt; ENV[&#39;MAILGUN_LOGIN&#39;],</span>
</span><span class='line'><span class="sr">:password =&amp;gt; ENV[&#39;MAILGUN_PASSWORD&#39;],</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">perform_deliveries</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">raise_delivery_errors</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong><em>3) Protecting your API keys, settings and passwords: </em></strong><br>
To protect the security of your passwords etc., you can either use <a href="https://github.com/laserlemon/figaro">the Figaro gem</a>, or do it yourself:<br>
i) Create a <code>.yml</code> file in the <code>config</code> folder, e.g. <code>application.yml</code><br>
ii) Create global variables in the file, but using a colon (:) instead of an equal sign (=), e.g.:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MAILGUN_LOGIN</span>    <span class="p">:</span> <span class="n">postmaster</span><span class="vi">@handraise</span><span class="o">.</span><span class="n">mailgun</span><span class="o">.</span><span class="n">org</span>
</span><span class='line'><span class="no">MAILGUN_PASSWORD</span> <span class="p">:</span> <span class="o">[</span><span class="n">password</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
iii) Call these variables using <code>ENV['']</code>, as in the codeblock in step #2 above<br>
iv) Put the <code>.yml</code> file in your <code>.gitignore</code> file:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Ignore application configuration&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="sr">/config/</span><span class="n">application</span><span class="o">.</span><span class="n">yml</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong><em>Debugging with Exception Notifier</em></strong><br>
Most of Exception Notifier's error messages were detailed and informative. But one in particular (and our first error in fact!) stumped us:<br>
<img src="http://ei-lene.github.com/images/2013_04_07/exception_notification.png"><br>
What isn't precompiled? This is as cryptic an error message as "We're sorry but something went wrong". We initially thought it was an asset precompilation issue, but that wasn't the case.</p>

<p><a href="https://twitter.com/withloudhands">Bob</a> understood the error immediately. It was "nil isn't precompiled", and he knew this because "isn't precompiled" was slightly further indented than the rest of the message, which indicated a blank space, and hence, "nil". Riiiiggght.
<img src="http://ei-lene.github.com/images/2013_04_07/indented_error_message.png"></p>

<p>Apparently, this error arose because we forgot to include a conditionality in our views, to not render a user photo if a user didn't have a photo. So this was quite easily fixed once we realised what the error was.</p>

<p style="font-size: 70%; font-weight: normal">
Resources:<br>
1) <a href="http://smartinez87.github.io/exception_notification/">Exception Notification by Sebastian Martinez</a><br>
2) SMTP configuration at my classmate Victoria's <a href="http://vicfriedman.github.io/blog/2013/03/24/action-mailer-configurations/">blog </a>
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 authentication for n00bs]]></title>
    <link href="http://ei-lene.github.com/blog/2013/03/23/rails-3-authentication-for-n00bs/"/>
    <updated>2013-03-23T18:01:00-04:00</updated>
    <id>http://ei-lene.github.com/blog/2013/03/23/rails-3-authentication-for-n00bs</id>
    <content type="html"><![CDATA[<h3><em>Progressing my ToDoList app - making it work, making it right</em></h3>


<p><img src="http://ei-lene.github.com/images/2013_03_23/password_authentication.png"></p>

<p style="font-size: 70%; font-weight: normal">
Source: <a href="http://euroscientist.com/2012/03/picking-a-perfect-password/">On picking a perfect password by Euroscientist</a>
</p>


<p>Since I have a sieve-like memory, I really need to take detailed notes and practice practice in order to remember how to do things. Hence, I am trying to apply what we’ve learned through lectures in my ToDoList ‘practice’ app, especially on areas that I haven’t had a chance to personally code in our current group ‘Hand Raise’ project.</p>

<p>At the end of my <a href="http://ei-lene.github.com/blog/2013/03/06/my-top-4-rails-tricks-in-my-first-rails-app/">previous blog post on my ToDoList app</a>, my next steps were to:<br>
1)   Change the navigation links so they are conditional<br>
2)   Add authorization for Users to create, edit and delete tasks</p>

<p>But before authorizing users, we first need to authenticate users, and this will be the main body of my post (<a href="#work">making it work</a>). The remainder of my post (<a href="#right">making it right</a>) is about refactoring, conditionally displaying links and some validation pitfalls that tripped me up.</p>

<!--more-->


<p><strong><a name="work">Making it work - Rails 3 Authentication in 4 parts: </a></strong><br>
<strong><em>1) Leveraging Rails 3 functionality</em></strong><br>
Rails 3 includes a <a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html - method-i-has_secure_password">has_secure_password class method</a> which simplifies authentication for the beginner and/or the gem-shy.<br>
i) Generate a User model which includes a <strong>password_digest</strong> string field, which is required to leverage the <strong>has_secure_password </strong> functionality<br>
ii)Add <strong>has_secure_password </strong> in the User model<br>
iii) Include (or uncomment) the <strong>bcrypt-ruby </strong> gem in the Gemfile</p>

<p><strong><em>2) Creating logins and sessions</em></strong><br>
The act of logging in is the start of a new user session, which is a virtual model, which means (per my interpretation), that there are specific rules that govern each session, but that there is no need for an actual model, because nothing is persisted into the database.<br>
i) Generate a sessions controller: <code>rails g controller sessions</code><br>
ii) Create a login form in view. Note that you should use the <strong>form_tag</strong> helper instead of the form_for helper because there is no sessions model<br>
iii)In the <em>Sessions controller</em>, write a <strong>create</strong> method, which says:
if a <em>user exists</em> and the <em>password can be authenticated</em> (note that <code>.authenticate</code> is a method given by <code>has_secure_password</code>), then <em>set the user’s id</em> as <em> the user_id of the session</em>.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SessionsController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">user</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;session[:user_id] = user.id </span>
</span><span class='line'><span class="sr">redirect_to root_url, notice:&quot;Logged in!&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">alert</span> <span class="o">=</span> <span class="s2">&quot;Email or password is invalid&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
iv) Logging out would simply entail setting the session’s user_id to nil: <code>session[:user_id] = nil</code><br>
v) Logging out in views is a bit tricky:
<code>ruby
&lt;%= link_to "Log out", session_path(“current user”), method: "delete" %&gt;
</code>
--> even though the session <code>destroy</code> method does not accept any arguments, the <code>session_path</code> expects an argument, so just put any argument in<br>
--> need to include <strong>method: “delete”</strong> (note that <code>method: :destroy</code> doesn’t work)</p>

<p><strong><em>3) Allowing the application remember that a user logged in</em></strong><br>
Create an instance variable to allow the app to remember who the current user is.<br>
i) In <em>Application Controller</em> (so it is set app-wide), create a <em>private method</em> to <em>store the session’s user_id</em> as the <em>current_user</em>, if session user_id exists.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ApplicationController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">helper_method</span> <span class="ss">:current_user</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>--> add a <code>helper_method</code> to allow the method to be accessible to all the Views</p>

<p><strong><em>4) Allowing the application to test if a user is logged in</em></strong><br>
i) In <em>ApplicationController</em>, create a <em>private method</em> <strong>logged_in?</strong> or <strong>authorize</strong> (or anything that is sensibly-named) that tests if a user is logged in.<br>
Either:
<code>ruby
true if current_user
</code>
Or:
<code>ruby
redirect_to new_session_path if current_user.nil?
</code>
ii) In each <em>relevant controller</em> (in this case, Lists, Tasks, Users), create a <strong>before_filter</strong> which runs on specific actions with options, e.g.
<code>ruby
before_filter logged_in?, only: [:edit, :destroy]
</code>
or:
<code>ruby
before_filter logged_in?, except: [:show, :index]
</code>
<strong><a name="right">Making it right - refactoring authentication, conditionally displaying links, validation pitfalls</a></strong><br>
<strong><em>1) Refactoring authentication</em></strong><br>
i) Prettifying routes<br>
To change routes from users/new, sessions/new etc. to signup and login, we need to change the routes and then update the views.<br>
Adding the following routes to the routes file...
<code>ruby
get 'signup'=&gt; 'users#new'
get 'login' =&gt; 'sessions#new'
post 'login' =&gt; 'sessions#create'
get 'logout'=&gt; 'sessions#destroy'
</code>
...enables us to refactor our code in Views from...
<code>ruby
&lt;%= link_to "Sign up", new_user_path %&gt;
&lt;%= link_to "Log in", new_session_path %&gt;
&lt;%= link_to "Log out", session_path(current_user), method: "delete" %&gt;
</code>
to...
<code>ruby
&lt;%= link_to "Sign up", signup_path %&gt;
&lt;%= link_to "Log in", login_path %&gt;
&lt;%= link_to "Log out", logout_path %&gt;
</code></p>

<p>ii) Further abstracting methods<br>
We can encapsulate the logic of setting session user_ids in private methods in the ApplicationController:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ApplicationController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def logout</span>
</span><span class='line'><span class="sr">  session[:user_id] = nil</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
We can then refactor the SessionsController to use these methods.</p>

<p><strong><em>2) Conditionally displaying links</em></strong><br>
I wanted to hide the navigation links for a page if a user is already on that page. The <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html">Rails UrlHelper</a> from the ActionView::Helpers were very useful in this regard.</p>

<p>Methods such as <code>link_to_if</code>, <code>link_to_unless</code> and <code>link_to_unless_current</code> provide a lot of options for toggling links on and off.</p>

<p>But to completely hide a link, when a user is on a specific page, I used the <code>current_page?</code> method as follows:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ApplicationController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">unless</span> <span class="n">current_page?</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;li&gt;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">end</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong><em>3) Validation pitfalls</em></strong><br>
In this set of iterations, I have also incorporated additional <a href="http://ei-lene.github.com/blog/2013/03/11/front-end-form-validation-my-top-3-jquery-apis">front-end</a> and back-end validations that we learned a couple of weeks ago.</p>

<p>One problem I encountered was with password validation, where I initially applied
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">6</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This broke my ability to assign a user to a task when creating and adding a task to a list. And that took my AGES to debug. Finally, I realized that the user wasn’t saving because the password validation was failing.  I got around it by only validating the password on creation:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">6</span> <span class="p">},</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:create</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another issue I grappled with was the case-sensitivity of emails. I came across <code>:case_sensitive =&gt; false</code>, but <a href="http://pivotallabs.com/standup-5-21-2010-validates-uniqueness-of-and-case-sensitivity/">some</a> (admittedly dated) <a href="http://techblog.floorplanner.com/post/20528527222/case-insensitive-validates-uniqueness-of-slowness">blogs</a> have suggested that it slows down applications, so I have downcased the emails when creating a user, and also downcased the email input when creating a session.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UsersController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SessionsController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">].</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># other code omitted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p style="font-size: 70%; font-weight: normal">
Resources:<br>
1) <a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html - method-i-has_secure_password">ActiveModel at http://api.rubyonrails.org/</a>
<br>
2) Authentication from scratch prior to Rails 3: <a href="http://railscasts.com/episodes/250-authentication-from-scratch">RailsCasts</a> / <a href="http://asciicasts.com/episodes/250-authentication-from-scratch">ASCIIcasts</a><br>
3) <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html">ActionView at http://api.rubyonrails.org/</a>

</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My top 4 Rails tricks in my first rails app]]></title>
    <link href="http://ei-lene.github.com/blog/2013/03/06/my-top-4-rails-tricks-in-my-first-rails-app/"/>
    <updated>2013-03-06T21:18:00-05:00</updated>
    <id>http://ei-lene.github.com/blog/2013/03/06/my-top-4-rails-tricks-in-my-first-rails-app</id>
    <content type="html"><![CDATA[<h3><em>Make it work, make it right, …</em></h3>


<p>We began learning Rails last week at the <a href="http://flatironschool.com/">Flatiron School</a>, with lectures and a couple of guided Rails labs / tutorials.</p>

<p>In this post, I will outline the key development stages* of my first ever non-guided , albeit simple, Rails app (a ToDoList app) and my top tricks &amp; workarounds for the current version of the app.</p>

<p><strong> TL;DR:</strong><br>
Top 4 tricks: <a href="#f.select">f.select</a> ; <a href="#f.hidden_field">f.hidden_field</a>, <a href="#to_param">to_param</a>, <a href="#button_to">button_to</a></p>

<p><strong><a href="http://en.wikipedia.org/wiki/The_Full_Monty">The Full Monty...</a></strong><br></p>

<!--more-->


<p>As I’m sure most fledgling coders will sympathise with, it seems to be that the biggest hurdle when trying to programme an app (with limited or no guidance) is the ‘coder's block’. The coder’s version of <a href="http://en.wikipedia.org/wiki/Watership_Down">going tharn</a>  at the sight of a blank text-editor. What seemed doable (not to say easy) enough in a guided tutorial, suddenly seems impossible – where do I begin? what do I do?</p>

<p>After several weeks of countless panic attacks as part of my course, I am slowly beginning to learn to deal with my coder’s block, through the following mantras:<br>
1)  breathe… <a href="http://en.wikipedia.org/wiki/Keep_Calm_and_Carry_On">Keep Calm and Carry On</a><br>
2)  <a href="http://c2.com/cgi/wiki?MakeItWorkMakeItRightMakeItFast">Make It Work, Make It Right, Make It Fast </a></p>

<p>On the second mantra, my key takeaway was that even great programmers recognise that Rome wasn’t build in a day, so for me, for now, I just need to Make It Work, <em>by any means necessary</em>. Even if I have use brute force** to machete my way through, the first step is to get it working.</p>

<p><strong>.v001</strong><br>
<strong><em>Making it work:</em></strong><br>
With that in mind, the first major iteration of my ToDoList app was minimalistic to the extreme***. My only aims were: <br>
1)  To create lists and show them on the home page<br>
2)  To add tasks to lists<br>
<img src="http://ei-lene.github.com/images/2013_03_06/v1_home.png"><br>
<img src="http://ei-lene.github.com/images/2013_03_06/v1_addtasks.png"></p>

<p><strong><em>Key issues / next steps:</em></strong><br>
1)  The unordered list was clearly a bad idea – users would have to guess and/or remember the number of the list they want to add their task to<br>
2)  The lists should be ordered and should be displayed on the ‘Add tasks’ page<br></p>

<p><strong>.v002</strong><br>
<strong><em>Making it right:</em></strong><br>
<a name="f.select"><em>Top Trick #1 – <code>f.select</code></em></a><br>
When discussing the lab in class, I mentioned that I was intending to add radio buttons to the Task <code>new.html.erb</code> page so users can choose the list to add their task to.
<a href="https://twitter.com/aviflombaum">Avi</a> suggested using a drop-down menu instead, and showed briefly walked through the <code>f.select</code> option in the Rails <code>form_for</code> helper</p>

<p>Thus, with a short line of code, I significantly improved my user experience and interface:
<code>ruby new.html.erb
&lt;%= f.select :list_id, List.all.collect { |l| [l.name, l.id]} %&gt;
</code>
<img src="http://ei-lene.github.com/images/2013_03_06/v2_addtasks.png"></p>

<p><strong><em>Making it work:</em></strong><br>
1) Users should be able to add tasks to a specific list when on that list page<br>
<a name="f.hidden_field"><em>Top Trick #2 – <code>f.hidden_field</code> </em></a><br>
My initial intention was to have an “Add task to this list” link which would redirect to a new route along the lines of <code>/lists/:id/tasks/new</code>.</p>

<p>However, despite my valiant efforts at throwing all sorts of different code permutations and combinations at Rails, the standard <code>new_task_path</code> could not seem to register the fact that it had just been routed from a specific list id, and store that list id.****</p>

<p>As a workaround, I decided to implement a task form on the list show page (<code>show.html.erb</code>) with <code>f.hidden_field(:list_id)</code>, a technique that I learnt in <a href="http://tutorials.jumpstartlab.com/projects/blogger.html">Jumpstart Lab’s blogger tutorial</a> that we were assigned.</p>

<p>And having implemented that, I’ve realised that it works really well, and is more optimal than having to click on a link to an alternate path. Because in this case, each time the user adds a new task to a list, the list page reloads, automatically allowing the user to add another new task to the list.<br>
<img src="http://ei-lene.github.com/images/2013_03_06/v2_addtasktospecificlist.png"></p>

<p>3) Users should be able to delete and edit lists. As an initial testing step, I implemented the ability for users to:<br>
i) delete the entire list only<br>
ii) update list name and existing task descriptions<br>
 <img src="http://ei-lene.github.com/images/2013_03_06/v2_editlist.png"></p>

<p><strong><em>Key issues / next steps:</em></strong><br>
1)  Change the routes of list from id (list/:id) to name (list/:name), to make the routes look more elegant<br>
2)  Flesh out edit list functionality – users should be able to delete individual tasks in a specific list<br></p>

<p><strong>.v003</strong><br>
<strong><em>Making it right:</em></strong><br>
1) Added list routing via <code>permalink</code> (where <code>permalink = name.downcase.gsub(“ “,”-“</code>)<br>
<a name="to_param"><em>Top Trick #3 – <code>to_param</code></em></a><br>
<a href="https://twitter.com/aviflombaum">Avi</a> mentioned in class that you could edit the url routing by editing the to_param method in the relevant model.</p>

<p>I must’ve missed out the second part of his words, because I implemented that, then proceeded to struggle as Rails spat out variants of the following error as I diced and spliced my code creatively to try to get it working:<br>
<img src="http://ei-lene.github.com/images/2013_03_06/error_message.png"></p>

<p>After extensive googling, I found my solution at <a href="http://railscasts.com/episodes/63-model-name-in-url">Railscasts</a>.</p>

<p>I initially used the first method,  implementing <code>"#{id}-#{permalink}"</code> in <code>to_param</code> and retaining the <code>.find(params[:id])</code> in the Controller. But the id of the lists would show up in the url which would not correspond to their position based on the number of existing lists (because deleted lists would retain their unique primary_key id), which I found particularly inelegant.</p>

<p>And so I opted for the second method instead:
<code>ruby list.rb
def to_param
  permalink
end
</code>
``` ruby lists_controller.rb
def edit</p>

<pre><code>@list = List.find_by_permalink(params[:id])
</code></pre>

<p>end
```
<img src="http://ei-lene.github.com/images/2013_03_06/v3_addtasks.png"></p>

<p><strong><em>Making it work:</em></strong><br>
Added functionality to allow users to delete individual tasks in a specific list, even if the ‘Delete this task’ link was very ugly and incongruous next to the compact ‘Update Task’ submit button.<br>
<img src="http://ei-lene.github.com/images/2013_03_06/v3_editlisttasks.png"></p>

<p><strong><em>Key issues / next steps:</em></strong><br>
1) Change the styling of ‘Delete this task’<br>
2) Improve overall styling</p>

<p><strong>.v004</strong><br>
<strong><em>Making it right:</em></strong><br>
1)  Overall styling improved<br>
<img src="http://ei-lene.github.com/images/2013_03_06/current_list.png"></p>

<p>2) Button generated for ‘Delete Task’ <br>
<a name="button_to"><em>Top Trick #3 – <code>button_to</code></em></a><br>
Before I discovered the delightful <code>button_to</code> option via googling, I thought the only way to generate buttons in rails was to create a <code>f.submit</code> within the <code>form_for</code> helper. And so I tried various ways to implement a <code>method: :delete</code> and routing to <code>task_path(t)</code> within the <code>f.submit</code>.</p>

<p>Eventually, I gave up banging my head on the <code>f.submit</code> wall and tried a different tack - CSS buttons! But I found CSS buttons very unwieldy and impossible to style to match the ‘Update Task’ button.</p>

<p><code>button_to</code> was a life-saver. With one line of elegant code, I managed to generate a lovely Rails-format button:<br>
<code>&lt;%= button_to 'Delete Task', task_path(t), method: :delete %&gt;</code>
<img src="http://ei-lene.github.com/images/2013_03_06/current_editlist.png"></p>

<p><strong><em>Conclusion / Next steps:</em></strong><br>
Even though my ToDoList app is still very basic for now, it has come a long way from the start, as this post has demonstrated. In fact, if I had tried to tackle even all of the basic functionality and UI in the current version of the app, I wouldn’t have dared to begin the project.</p>

<p>Instead, I put on my blinkers and took one baby step at a time. As my classmate <a href="https://twitter.com/janeeats">Jane</a> so aptly puts it: <a href="http://janeeats.github.com/blog/2013/02/24/how-to-eat-an-elephant/">“How Do You Eat an Elephant? One Bite at a Time.”</a></p>

<p>So far, I have only been iterating through the process of making it work and making it right, as I’m not yet at the stage where I have the skills (or the project complexity) to make it fast.</p>

<p><strong><em>Next steps:</em></strong><br>
1) Change the navigation links so that they are conditional – e.g. links to Home don’t show up when a user is already on the home page<br>
2) Add authorisation for Users to create, edit and delete lists<br></p>

<p>Note: Github’s rollback has been invaluable in the creation of this post, namely the commands: <code>git reset –-hard &lt;commit sha id&gt;</code> &amp; <code>git push -f</code></p>

<p style="font-size: 70%; font-weight: normal">
* In reality, there were a lot of mini-steps / stages. But in the interest of simplicity, and because I didn’t commit often enough to be able to rollback commits to each mini stage, I am grouping the changes into 4 stages<br>
** The phrase "brute force" is attributable to my classmate <a href="http://rseshan.github.com/">Rahul</a><br>
*** With bare bones styling, because the white background and default serif fonts give me a headache<br>
**** I spoke to <a href="https://twitter.com/withloudhands">Bob</a> about this on Monday, and he told me that this would needed to be done via nested routes, a topic which will covered in future<br>
</p>

]]></content>
  </entry>
  
</feed>
