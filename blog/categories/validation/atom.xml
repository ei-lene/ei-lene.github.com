<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: validation | Padawan coder]]></title>
  <link href="http://ei-lene.github.com/blog/categories/validation/atom.xml" rel="self"/>
  <link href="http://ei-lene.github.com/"/>
  <updated>2013-04-17T22:56:53-04:00</updated>
  <id>http://ei-lene.github.com/</id>
  <author>
    <name><![CDATA[ei-lene]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 3 authentication for n00bs]]></title>
    <link href="http://ei-lene.github.com/blog/2013/03/23/rails-3-authentication-for-n00bs/"/>
    <updated>2013-03-23T18:01:00-04:00</updated>
    <id>http://ei-lene.github.com/blog/2013/03/23/rails-3-authentication-for-n00bs</id>
    <content type="html"><![CDATA[<h3><em>Progressing my ToDoList app - making it work, making it right</em></h3>


<p><img src="http://ei-lene.github.com/images/2013_03_23/password_authentication.png"></p>

<p style="font-size: 70%; font-weight: normal">
Source: <a href="http://euroscientist.com/2012/03/picking-a-perfect-password/">On picking a perfect password by Euroscientist</a>
</p>


<p>Since I have a sieve-like memory, I really need to take detailed notes and practice practice in order to remember how to do things. Hence, I am trying to apply what we’ve learned through lectures in my ToDoList ‘practice’ app, especially on areas that I haven’t had a chance to personally code in our current group ‘Hand Raise’ project.</p>

<p>At the end of my <a href="http://ei-lene.github.com/blog/2013/03/06/my-top-4-rails-tricks-in-my-first-rails-app/">previous blog post on my ToDoList app</a>, my next steps were to:<br>
1)   Change the navigation links so they are conditional<br>
2)   Add authorization for Users to create, edit and delete tasks</p>

<p>But before authorizing users, we first need to authenticate users, and this will be the main body of my post (<a href="#work">making it work</a>). The remainder of my post (<a href="#right">making it right</a>) is about refactoring, conditionally displaying links and some validation pitfalls that tripped me up.</p>

<!--more-->


<p><strong><a name="work">Making it work - Rails 3 Authentication in 4 parts: </a></strong><br>
<strong><em>1) Leveraging Rails 3 functionality</em></strong><br>
Rails 3 includes a <a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html - method-i-has_secure_password">has_secure_password class method</a> which simplifies authentication for the beginner and/or the gem-shy.<br>
i) Generate a User model which includes a <strong>password_digest</strong> string field, which is required to leverage the <strong>has_secure_password </strong> functionality<br>
ii)Add <strong>has_secure_password </strong> in the User model<br>
iii) Include (or uncomment) the <strong>bcrypt-ruby </strong> gem in the Gemfile</p>

<p><strong><em>2) Creating logins and sessions</em></strong><br>
The act of logging in is the start of a new user session, which is a virtual model, which means (per my interpretation), that there are specific rules that govern each session, but that there is no need for an actual model, because nothing is persisted into the database.<br>
i) Generate a sessions controller: <code>rails g controller sessions</code><br>
ii) Create a login form in view. Note that you should use the <strong>form_tag</strong> helper instead of the form_for helper because there is no sessions model<br>
iii)In the <em>Sessions controller</em>, write a <strong>create</strong> method, which says:
if a <em>user exists</em> and the <em>password can be authenticated</em> (note that <code>.authenticate</code> is a method given by <code>has_secure_password</code>), then <em>set the user’s id</em> as <em> the user_id of the session</em>.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SessionsController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">user</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;session[:user_id] = user.id </span>
</span><span class='line'><span class="sr">redirect_to root_url, notice:&quot;Logged in!&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">alert</span> <span class="o">=</span> <span class="s2">&quot;Email or password is invalid&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
iv) Logging out would simply entail setting the session’s user_id to nil: <code>session[:user_id] = nil</code><br>
v) Logging out in views is a bit tricky:
<code>ruby
&lt;%= link_to "Log out", session_path(“current user”), method: "delete" %&gt;
</code>
--> even though the session <code>destroy</code> method does not accept any arguments, the <code>session_path</code> expects an argument, so just put any argument in<br>
--> need to include <strong>method: “delete”</strong> (note that <code>method: :destroy</code> doesn’t work)</p>

<p><strong><em>3) Allowing the application remember that a user logged in</em></strong><br>
Create an instance variable to allow the app to remember who the current user is.<br>
i) In <em>Application Controller</em> (so it is set app-wide), create a <em>private method</em> to <em>store the session’s user_id</em> as the <em>current_user</em>, if session user_id exists.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ApplicationController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">helper_method</span> <span class="ss">:current_user</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>--> add a <code>helper_method</code> to allow the method to be accessible to all the Views</p>

<p><strong><em>4) Allowing the application to test if a user is logged in</em></strong><br>
i) In <em>ApplicationController</em>, create a <em>private method</em> <strong>logged_in?</strong> or <strong>authorize</strong> (or anything that is sensibly-named) that tests if a user is logged in.<br>
Either:
<code>ruby
true if current_user
</code>
Or:
<code>ruby
redirect_to new_session_path if current_user.nil?
</code>
ii) In each <em>relevant controller</em> (in this case, Lists, Tasks, Users), create a <strong>before_filter</strong> which runs on specific actions with options, e.g.
<code>ruby
before_filter logged_in?, only: [:edit, :destroy]
</code>
or:
<code>ruby
before_filter logged_in?, except: [:show, :index]
</code>
<strong><a name="right">Making it right - refactoring authentication, conditionally displaying links, validation pitfalls</a></strong><br>
<strong><em>1) Refactoring authentication</em></strong><br>
i) Prettifying routes<br>
To change routes from users/new, sessions/new etc. to signup and login, we need to change the routes and then update the views.<br>
Adding the following routes to the routes file...
<code>ruby
get 'signup'=&gt; 'users#new'
get 'login' =&gt; 'sessions#new'
post 'login' =&gt; 'sessions#create'
get 'logout'=&gt; 'sessions#destroy'
</code>
...enables us to refactor our code in Views from...
<code>ruby
&lt;%= link_to "Sign up", new_user_path %&gt;
&lt;%= link_to "Log in", new_session_path %&gt;
&lt;%= link_to "Log out", session_path(current_user), method: "delete" %&gt;
</code>
to...
<code>ruby
&lt;%= link_to "Sign up", signup_path %&gt;
&lt;%= link_to "Log in", login_path %&gt;
&lt;%= link_to "Log out", logout_path %&gt;
</code></p>

<p>ii) Further abstracting methods<br>
We can encapsulate the logic of setting session user_ids in private methods in the ApplicationController:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ApplicationController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def logout</span>
</span><span class='line'><span class="sr">  session[:user_id] = nil</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
We can then refactor the SessionsController to use these methods.</p>

<p><strong><em>2) Conditionally displaying links</em></strong><br>
I wanted to hide the navigation links for a page if a user is already on that page. The <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html">Rails UrlHelper</a> from the ActionView::Helpers were very useful in this regard.</p>

<p>Methods such as <code>link_to_if</code>, <code>link_to_unless</code> and <code>link_to_unless_current</code> provide a lot of options for toggling links on and off.</p>

<p>But to completely hide a link, when a user is on a specific page, I used the <code>current_page?</code> method as follows:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ApplicationController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">unless</span> <span class="n">current_page?</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;li&gt;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">link_to</span> <span class="s2">&quot;Home&quot;</span><span class="p">,</span> <span class="n">root_path</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">end</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong><em>3) Validation pitfalls</em></strong><br>
In this set of iterations, I have also incorporated additional <a href="http://ei-lene.github.com/blog/2013/03/11/front-end-form-validation-my-top-3-jquery-apis">front-end</a> and back-end validations that we learned a couple of weeks ago.</p>

<p>One problem I encountered was with password validation, where I initially applied
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">6</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This broke my ability to assign a user to a task when creating and adding a task to a list. And that took my AGES to debug. Finally, I realized that the user wasn’t saving because the password validation was failing.  I got around it by only validating the password on creation:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">6</span> <span class="p">},</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:create</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another issue I grappled with was the case-sensitivity of emails. I came across <code>:case_sensitive =&gt; false</code>, but <a href="http://pivotallabs.com/standup-5-21-2010-validates-uniqueness-of-and-case-sensitivity/">some</a> (admittedly dated) <a href="http://techblog.floorplanner.com/post/20528527222/case-insensitive-validates-uniqueness-of-slowness">blogs</a> have suggested that it slows down applications, so I have downcased the emails when creating a user, and also downcased the email input when creating a session.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>UsersController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SessionsController  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">].</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># other code omitted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p style="font-size: 70%; font-weight: normal">
Resources:<br>
1) <a href="http://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html - method-i-has_secure_password">ActiveModel at http://api.rubyonrails.org/</a>
<br>
2) Authentication from scratch prior to Rails 3: <a href="http://railscasts.com/episodes/250-authentication-from-scratch">RailsCasts</a> / <a href="http://asciicasts.com/episodes/250-authentication-from-scratch">ASCIIcasts</a><br>
3) <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html">ActionView at http://api.rubyonrails.org/</a>

</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Front-end form validation - my top 3 JQuery APIs]]></title>
    <link href="http://ei-lene.github.com/blog/2013/03/11/front-end-form-validation-my-top-3-jquery-apis/"/>
    <updated>2013-03-11T22:15:00-04:00</updated>
    <id>http://ei-lene.github.com/blog/2013/03/11/front-end-form-validation-my-top-3-jquery-apis</id>
    <content type="html"><![CDATA[<p>Last week, we had <a href="http://jonathangrover.com/">Jonathan Grover</a> guest lecture us for a week on Javascript and JQuery.</p>

<p>It was a really interesting week during which we learnt how useful Javascript is in improving the user interface and experience, how JQuery resolves issues around Javascript cross-browser compatibility, and applied Javascript and JQuery in many contexts, including interacting with Twitter, Flickr and Google Maps APIs.</p>

<p>One of the practical applications of Javascript / JQuery was in form validations, which we combined with back-end Rails validation. While back-end validation is used to ensure data integrity, front-end validation is used to provide end-users with timely feedback to create a more positive user-experience.</p>

<!--more-->


<p>In designing a simple user sign-up form (as shown at the bottom of this post), my top 3 JQuery APIs to provide appropriate and timely user feedback are the following:<br>
<a href="#submit">.submit()</a><br>
<a href="#blur">.blur()</a><br>
<a href="#keyup">.keyup()</a><br></p>

<p><a name="submit"><strong>.submit()</strong></a><br>
<code>.submit()</code> provides users with feedback upon submission of the form. Be sure to use <code>&amp;</code> instead of <code>&amp;&amp;</code> so that users get all the error messages at once. – There is nothing more annoying than to get drip-fed error messages each time you click ‘submit’.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.submit()  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// other code truncated (including definition of functions)</span>
</span><span class='line'>  <span class="nx">newUserForm</span><span class="p">.</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="nx">validateUsername</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">validateFirstname</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">validateLastname</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">validateEmail</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">validatePassword</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a name="blur"><strong>.blur()</strong></a><br>
I would argue that giving users feedback upon submission is too late, because it requires the user to go back to the top and reconsider every input field again, which requires more mental effort than if feedback was given at each input field, before the brain is occupied with considering a new topic</p>

<p>To this end, <code>.blur()</code> is very useful. <code>.blur()</code> is triggered when the user leaves a particular form input field, that is, as soon as it appears that a user is ‘done’ with that field.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.blur()  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// other code truncated (including definition of functions)</span>
</span><span class='line'>  <span class="nx">userName</span><span class="p">.</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">validateUsername</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">firstName</span><span class="p">.</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">validateFirstname</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">lastName</span><span class="p">.</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">validateLastname</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">email</span><span class="p">.</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">validateEmail</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">password</span><span class="p">.</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">validatePassword</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In my code, even though I added <code>.blur()</code> validation for each input field, I also kept my <code>.submit()</code> validation to prevent the form from being submitted unless all conditions were met.</p>

<p><a name="keyup"><strong>.keyup()</strong></a><br>
This provides even more immediate feedback than <code>.blur()</code>, as the feedback can be provided ‘live’ as each key is pressed and released.
Real-time feedback may not be appropriate for every single field. For example, it might be annoying to get a live commentary as you are trying to pick a username.</p>

<p>However, it can be used to great effect for specific cases. For example, it is mostly commonly used to give real-time feedback on password strength as users are choosing their password.</p>

<p>In my form, I chose to use <code>.keyup()</code> during password choice (to indicate password strength, even though I am not requiring a ‘strong’ password), as well as for the validation of confirmation emails and passwords.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.keyup()  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// other code truncated (including definition of functions)</span>
</span><span class='line'>  <span class="nx">emailInputs</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">emailConfVal</span> <span class="o">=</span> <span class="nx">emailConfirmation</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'><span class="nx">emailVal</span> <span class="o">=</span> <span class="nx">email</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'><span class="nx">emailConfError</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">emailVal</span><span class="o">===</span><span class="s1">&#39;&#39;</span><span class="o">||</span><span class="nx">emailConfVal</span><span class="o">===</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">emailConfError</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">emailVal</span> <span class="o">===</span> <span class="nx">emailConfVal</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">emailConfError</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Email entries match&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">emailConfError</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">emailConfError</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Confirmation email does not match email&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">emailConfError</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, I have also used <code>.text()</code> and <code>.addClass()</code> extensively.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.text() &amp; .addClass()  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// example usage</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">validatePasswordStrength</span><span class="p">(){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">lowercase</span> <span class="o">=</span> <span class="sr">/[a-z]/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uppercase</span> <span class="o">=</span> <span class="sr">/[A-Z]/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">numeric</span> <span class="o">=</span> <span class="sr">/[0-9]/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passwordVal</span> <span class="o">=</span> <span class="nx">password</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'><span class="nx">passwordError</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">lowercase</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">numeric</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)){</span>
</span><span class='line'>  <span class="nx">passwordError</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Password strength: Strong&quot;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">lowercase</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)){</span>
</span><span class='line'>  <span class="nx">passwordError</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Password strength: Medium&quot;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;amber&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">numeric</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)){</span>
</span><span class='line'>  <span class="nx">passwordError</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Password strength: Medium&quot;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;amber&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">numeric</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">lowercase</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">passwordVal</span><span class="p">)){</span>
</span><span class='line'>  <span class="nx">passwordError</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Password strength: Medium&quot;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;amber&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">passwordError</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Password strength: Weak&quot;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I used <code>.text()</code> to dynamically change the feedback message to the user, indicating whether a password is “weak”, “medium” or “strong”.</p>

<p>I also used <code>.addClass()</code> to give visual feedback to users though changing the styling of feedback messages (in my case, toggling between ‘green’, ‘amber’ and ‘red’ traffic light colors).</p>

<p>Resulting form with errors displayed: <br>
<img src="http://ei-lene.github.com/images/2013_03_11/displaymessages.png"><br></p>

<p style="font-size: 70%; font-weight: normal">
My github code for this form: <a href="https://github.com/ei-lene/validation_app">https://github.com/ei-lene/validation_app</a><br>
Two great resources: <br>
<a href="http://api.jquery.com/"> api.jquery.com</a><br>
<a href="http://oscarotero.com/jquery/">oscar otero</a><br>
</p>



]]></content>
  </entry>
  
</feed>
